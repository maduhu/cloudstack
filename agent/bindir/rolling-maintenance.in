#!/usr/bin/python
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#   http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
import sys
import logging
import os
import subprocess
from threading import Timer

timeoutSeconds = 10 * 60

LOG_FILE='/var/log/cloudstack/agent/rolling-maintenance.log'
EXEC_FILE='/etc/cloudstack/agent/rolling.d/exec'
DETAILS_FILE='/etc/cloudstack/agent/rolling.d/details'
HOOKS_DIR='/etc/cloudstack/agent/rolling.d'

logging.basicConfig(filename=LOG_FILE,
                    filemode='a',
                    format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                    datefmt='%H:%M:%S',
                    level=logging.INFO)
logger = logging.getLogger('rolling-maintenance')


def write_exec_file(finished, success):
    f = open(EXEC_FILE, "w")
    f.write("%s,%s" % (str(finished), str(success)))
    f.close()


def write_details(msg):
    f = open(DETAILS_FILE, "w")
    f.write("%s" % msg)
    f.close()


def append_details(msg):
    f = open(DETAILS_FILE, "a")
    f.write("%s" % msg)
    f.close()


def get_stage_scripts(stage):
    files = os.listdir(HOOKS_DIR + "/" + stage)
    paths = []
    for file in files:
        paths.append("%s/%s/%s" % (HOOKS_DIR, stage, file))
    return paths


def terminateProcess(process, scriptName):
    logger.warning('Custom script: %s taking longer than %s second[s]; terminating..' % (scriptName, str(timeoutSeconds)))
    process.terminate()


def execute_script(script):
    logger.info("Trying to execute script: " + script)
    process = subprocess.Popen([script], stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE, shell=False)
    try:
        timer = Timer(timeoutSeconds, terminateProcess, [process, script])
        timer.start()
        output, error = process.communicate()

        if process.returncode == -15:
            logger.error('Custom script: %s terminated after timeout of %s second[s].'
                         % (script, timeoutSeconds))
            return
        if process.returncode != 0:
            logger.info('return code: %s' % str(process.returncode))
            raise Exception(error)
        logger.info('Custom script: %s finished successfully; output: \n%s' %
                    (script, str(output)))
    finally:
        timer.cancel()
    return output


def execute_scripts(stage):
    write_exec_file(False, False)
    write_details("")
    scripts = get_stage_scripts(stage)
    executing = None
    try:
        for script in scripts:
            executing = script
            output = execute_script(script)
            append_details(output)
    except Exception as e:
        write_exec_file(True, False)
        logger.error("Error in script %s: %s" % (executing, e))
        append_details("%s - %s" % (executing, e))
        sys.exit(1)
    write_exec_file(True, True)


if __name__ == '__main__':
    if len(sys.argv) < 2:
        logger.error("Wrong number of parameters received, ./rolling-maintenance.py STAGE expected")
        sys.exit(0)

    stage = sys.argv[1]
    logger.info("Received parameters: stage: %s" % (stage))

    if stage not in ["preflight", "premaintenance", "maintenance"]:
        logger.error("Unknown stage received, reporting error to the CloudStack agent")
        write_exec_file(True, False)
        write_details("Unknown stage received %s" % stage)

    execute_scripts(stage)
    logger.info("Finished executing stage: %s" % (stage))
